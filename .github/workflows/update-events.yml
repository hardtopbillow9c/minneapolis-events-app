name: Update Minneapolis Events

on:
  schedule:
    # Every Sunday at 6 AM Central (11 UTC)
    - cron: '0 11 * * 0'
    # Every Wednesday at 8 AM Central (13 UTC) 
    - cron: '0 13 * * 3'
  workflow_dispatch: # Manual trigger
  push:
    paths:
      - 'events-data.csv'

jobs:
  update-events:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      run: |
        npm init -y
        npm install puppeteer axios cheerio csv-parser csv-writer

    - name: Update events data
      run: |
        cat > update-events.js << 'EOF'
        const fs = require('fs');
        const csv = require('csv-parser');
        const createCsvWriter = require('csv-writer').createObjectCsvWriter;
        const puppeteer = require('puppeteer');
        const axios = require('axios');

        async function updateEvents() {
          console.log('🎭 Starting events update...');
          
          // Read existing events
          const existingEvents = [];
          const existingEventNames = new Set();
          
          try {
            const csvContent = fs.readFileSync('events-data.csv', 'utf8');
            const lines = csvContent.split('\n');
            
            // Parse existing CSV
            for (let i = 1; i < lines.length; i++) {
              if (lines[i].trim()) {
                const values = parseCSVLine(lines[i]);
                if (values[1]) { // Event Name column
                  existingEventNames.add(values[1].replace(/"/g, '').trim());
                  existingEvents.push({
                    no: values[0]?.replace(/"/g, '').trim() || '',
                    eventName: values[1]?.replace(/"/g, '').trim() || '',
                    dates: values[2]?.replace(/"/g, '').trim() || '',
                    times: values[3]?.replace(/"/g, '').trim() || '',
                    venueName: values[4]?.replace(/"/g, '').trim() || '',
                    venueAddress: values[5]?.replace(/"/g, '').trim() || '',
                    category: values[6]?.replace(/"/g, '').trim() || '',
                    notes: values[7]?.replace(/"/g, '').trim() || ''
                  });
                }
              }
            }
            
            console.log(`📊 Found ${existingEvents.length} existing events`);
          } catch (error) {
            console.log('⚠️  No existing CSV found, starting fresh');
          }

          // Scrape new events from various sources
          const newEvents = [];
          
          try {
            // Example: Scrape First Avenue
            console.log('🎵 Checking First Avenue for new events...');
            const firstAveEvents = await scrapeFirstAvenue();
            newEvents.push(...firstAveEvents);
            
            // Example: Scrape Guthrie Theater
            console.log('🎭 Checking Guthrie Theater for new events...');
            const guthrieEvents = await scrapeGuthrie();
            newEvents.push(...guthrieEvents);
            
            // Example: Check event APIs
            console.log('🔍 Checking event APIs...');
            const apiEvents = await checkEventAPIs();
            newEvents.push(...apiEvents);
            
          } catch (error) {
            console.error('❌ Error scraping events:', error.message);
          }

          // Filter out duplicates
          const uniqueNewEvents = newEvents.filter(event => 
            !existingEventNames.has(event.eventName)
          );
          
          console.log(`✨ Found ${uniqueNewEvents.length} new events`);

          // Combine and sort all events
          const allEvents = [...existingEvents, ...uniqueNewEvents];
          
          // Assign new numbers
          allEvents.forEach((event, index) => {
            event.no = (index + 1).toString();
          });

          // Write updated CSV
          const csvWriter = createCsvWriter({
            path: 'events-data.csv',
            header: [
              {id: 'no', title: 'No.'},
              {id: 'eventName', title: 'Event Name'},
              {id: 'dates', title: 'Date(s)'},
              {id: 'times', title: 'Time(s)'},
              {id: 'venueName', title: 'Venue Name'},
              {id: 'venueAddress', title: 'Venue Address/Area'},
              {id: 'category', title: 'Category'},
              {id: 'notes', title: 'Notes'}
            ]
          });

          await csvWriter.writeRecords(allEvents);
          console.log(`💾 Updated CSV with ${allEvents.length} total events`);

          // Update last-updated timestamp
          const updateInfo = {
            lastUpdated: new Date().toISOString(),
            totalEvents: allEvents.length,
            newEventsAdded: uniqueNewEvents.length,
            sources: ['First Avenue', 'Guthrie Theater', 'Event APIs']
          };
          
          fs.writeFileSync('last-updated.json', JSON.stringify(updateInfo, null, 2));
          
          console.log('✅ Events update completed');
          return uniqueNewEvents.length;
        }

        function parseCSVLine(line) {
          const result = [];
          let current = '';
          let inQuotes = false;
          
          for (let i = 0; i < line.length; i++) {
            const char = line[i];
            if (char === '"') {
              inQuotes = !inQuotes;
            } else if (char === ',' && !inQuotes) {
              result.push(current);
              current = '';
            } else {
              current += char;
            }
          }
          result.push(current);
          return result;
        }

        async function scrapeFirstAvenue() {
          const browser = await puppeteer.launch({ 
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });
          
          try {
            const page = await browser.newPage();
            await page.goto('https://first-avenue.com/calendar', { 
              waitUntil: 'networkidle2',
              timeout: 30000 
            });

            const events = await page.evaluate(() => {
              const eventElements = document.querySelectorAll('.event-item, .show-listing, [class*="event"]');
              const events = [];
              
              eventElements.forEach(el => {
                const titleEl = el.querySelector('h3, h2, .title, [class*="title"]');
                const dateEl = el.querySelector('.date, [class*="date"]');
                const venueEl = el.querySelector('.venue, [class*="venue"]');
                
                if (titleEl && titleEl.textContent.trim()) {
                  events.push({
                    eventName: titleEl.textContent.trim(),
                    dates: dateEl?.textContent.trim() || 'Date TBD',
                    times: 'Check website',
                    venueName: venueEl?.textContent.trim() || 'First Avenue',
                    venueAddress: '701 First Avenue North Minneapolis MN',
                    category: 'Music',
                    notes: 'Auto-scraped from First Avenue'
                  });
                }
              });
              
              return events.slice(0, 10); // Limit to 10 new events
            });

            return events;
          } catch (error) {
            console.error('Error scraping First Avenue:', error.message);
            return [];
          } finally {
            await browser.close();
          }
        }

        async function scrapeGuthrie() {
          const browser = await puppeteer.launch({ 
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
          });
          
          try {
            const page = await browser.newPage();
            await page.goto('https://www.guthrietheater.org/shows-and-tickets/2025-season', { 
              waitUntil: 'networkidle2',
              timeout: 30000 
            });

            const events = await page.evaluate(() => {
              const showElements = document.querySelectorAll('[class*="show"], [class*="production"]');
              const events = [];
              
              showElements.forEach(el => {
                const titleEl = el.querySelector('h3, h2, .title');
                const dateEl = el.querySelector('[class*="date"]');
                
                if (titleEl && titleEl.textContent.trim()) {
                  events.push({
                    eventName: titleEl.textContent.trim(),
                    dates: dateEl?.textContent.trim() || '2025 Season',
                    times: 'Varies',
                    venueName: 'Guthrie Theater',
                    venueAddress: '818 South Second Street Minneapolis MN',
                    category: 'Theater',
                    notes: 'Auto-scraped from Guthrie Theater'
                  });
                }
              });
              
              return events.slice(0, 5);
            });

            return events;
          } catch (error) {
            console.error('Error scraping Guthrie:', error.message);
            return [];
          } finally {
            await browser.close();
          }
        }

        async function checkEventAPIs() {
          try {
            // Example: Check Ticketmaster API for Minneapolis events
            // You'd need to sign up for API keys
            const events = [];
            
            // Placeholder for API calls
            // const response = await axios.get('https://app.ticketmaster.com/discovery/v2/events.json', {
            //   params: {
            //     city: 'Minneapolis',
            //     stateCode: 'MN',
            //     apikey: process.env.TICKETMASTER_API_KEY
            //   }
            // });
            
            return events;
          } catch (error) {
            console.error('Error checking APIs:', error.message);
            return [];
          }
        }

        // Run the update
        updateEvents().catch(console.error);
        EOF
        
        node update-events.js

    - name: Check for changes
      id: verify-changed-files
      run: |
        if [ -n "$(git status --porcelain)" ]; then
          echo "changed=true" >> $GITHUB_OUTPUT
          echo "📊 Changes detected:"
          git status --porcelain
        else
          echo "changed=false" >> $GITHUB_OUTPUT
          echo "ℹ️  No new events found"
        fi

    - name: Commit and push if changed
      if: steps.verify-changed-files.outputs.changed == 'true'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "Events Update Bot"
        git add events-data.csv last-updated.json
        git commit -m "🎭 Weekly events update - $(date +'%Y-%m-%d')"
        git push

    - name: Create summary
      run: |
        echo "## 🎭 Events Update Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "- **Status:** $(if [ '${{ steps.verify-changed-files.outputs.changed }}' == 'true' ]; then echo 'New events added ✅'; else echo 'No changes ℹ️'; fi)" >> $GITHUB_STEP_SUMMARY
        if [ -f last-updated.json ]; then
          echo "- **Total Events:** $(cat last-updated.json | grep -o '"totalEvents":[0-9]*' | cut -d':' -f2)" >> $GITHUB_STEP_SUMMARY
          echo "- **New Events:** $(cat last-updated.json | grep -o '"newEventsAdded":[0-9]*' | cut -d':' -f2)" >> $GITHUB_STEP_SUMMARY
        fi
